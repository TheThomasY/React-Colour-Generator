{"version":3,"sources":["components/SearchBar.js","components/ColourCard.js","components/ColourGrid.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","searchColourHex","setSearchColourHex","className","onSubmit","event","preventDefault","onSearchColour","htmlFor","style","backgroundColor","type","id","placeholder","name","value","onChange","target","ColourCard","copied","setCopied","textColour","percentage","copiedPopup","rgb","color","onClick","navigator","clipboard","writeText","hex","setTimeout","opacity","ColourGrid","colourList","map","colourObj","App","setColourList","RGBToHex","sep","indexOf","r","substr","split","toString","g","b","length","searchRGB","h","hexToRGB","rgbArr","rgbDiff","console","log","i","Math","round","rgbRange","prevColourList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06173b91.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './css/SearchBar.css';\r\n\r\nexport default function SearchBar(props) {\r\n  const [searchColourHex, setSearchColourHex] = useState('#');\r\n\r\n  const searchChangeHandler = (event) => {\r\n    setSearchColourHex(event.target.value);\r\n  };\r\n\r\n  const searchHandler = (event) => {\r\n    event.preventDefault();\r\n    props.onSearchColour(searchColourHex);\r\n  };\r\n\r\n  return (\r\n    <div className='nav-bar'>\r\n      <h1 className='nav-title'>Colour Generator</h1>\r\n      <form className='search-form' onSubmit={searchHandler}>\r\n        <label htmlFor='header-search'>\r\n          <span className='sr-only'>Search blog posts</span>\r\n        </label>\r\n        <div\r\n          className='input-wrapper'\r\n          style={{ backgroundColor: searchColourHex }}\r\n        >\r\n          <input\r\n            className='search-input'\r\n            type='text'\r\n            id='search-input'\r\n            placeholder='#000000'\r\n            name='search'\r\n            value={searchColourHex}\r\n            onChange={searchChangeHandler}\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nexport default function ColourCard(props) {\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const copyToClipboardHandler = () => {\r\n    navigator.clipboard.writeText(props.hex);\r\n    setCopied(true);\r\n\r\n    setTimeout(function () {\r\n      setCopied(false);\r\n    }, 1500);\r\n  };\r\n\r\n  let textColour = props.percentage >= 0 ? '#ffffff' : '#000000';\r\n\r\n  let copiedPopup = copied ? '1' : '0';\r\n\r\n  return (\r\n    <div\r\n      style={{ backgroundColor: props.rgb, color: textColour }}\r\n      className='colour-card'\r\n    >\r\n      <h2 className='card-hex' onClick={copyToClipboardHandler}>\r\n        {props.hex}\r\n      </h2>\r\n      <h3 className='card-percentage'>{props.percentage}%</h3>\r\n      <div style={{ opacity: copiedPopup }} className='copy-popup'>\r\n        Copied to clipboard\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import ColourCard from './ColourCard';\r\nimport './css/ColourGrid.css';\r\n\r\nexport default function ColourGrid(props) {\r\n  return (\r\n    <div className='grid'>\r\n      {props.colourList.map((colourObj) => (\r\n        <ColourCard\r\n          key={colourObj.percentage}\r\n          percentage={colourObj.percentage}\r\n          hex={colourObj.hex}\r\n          rgb={colourObj.rgb}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport SearchBar from './components/SearchBar';\r\nimport ColourGrid from './components/ColourGrid';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  const [colourList, setColourList] = useState([]);\r\n\r\n  function hexToRGB(h) {\r\n    let r = 0, g = 0, b = 0;\r\n    // 3 digits\r\n    if (h.length === 4) {\r\n      r = \"0x\" + h[1] + h[1];\r\n      g = \"0x\" + h[2] + h[2];\r\n      b = \"0x\" + h[3] + h[3];\r\n    // 6 digits\r\n    } else if (h.length === 7) {\r\n      r = \"0x\" + h[1] + h[2];\r\n      g = \"0x\" + h[3] + h[4];\r\n      b = \"0x\" + h[5] + h[6];\r\n    }\r\n    return \"rgb(\"+ +r + \",\" + +g + \",\" + +b + \")\";\r\n  }\r\n\r\n  function RGBToHex(rgb) {\r\n    // Choose correct separator\r\n    let sep = rgb.indexOf(\",\") > -1 ? \",\" : \" \";\r\n    // Turn \"rgb(r,g,b)\" into [r,g,b]\r\n    rgb = rgb.substr(4).split(\")\")[0].split(sep);\r\n  \r\n    let r = (+rgb[0]).toString(16),\r\n        g = (+rgb[1]).toString(16),\r\n        b = (+rgb[2]).toString(16);\r\n  \r\n    if (r.length === 1)\r\n      r = \"0\" + r;\r\n    if (g.length === 1)\r\n      g = \"0\" + g;\r\n    if (b.length === 1)\r\n      b = \"0\" + b;\r\n  \r\n    return \"#\" + r + g + b;\r\n  }\r\n\r\n  const showColourGrid = (searchColourHex) => {\r\n    setColourList([]);\r\n    const searchRGB = hexToRGB(searchColourHex); \r\n\r\n    let sep = searchRGB.indexOf(\",\") > -1 ? \",\" : \" \";\r\n    let rgbArr = searchRGB.substr(4).split(\")\")[0].split(sep);\r\n    let rgbDiff = [255-rgbArr[0],255-rgbArr[1],255-rgbArr[2]];\r\n    console.log('rgbArr', rgbArr);\r\n    console.log('rgbDiff',rgbDiff);\r\n    let r = 0;\r\n    let g = 0;\r\n    let b = 0;\r\n\r\n    for (let i=0; i<21; i++) {\r\n\r\n      let percentage = i<10 ? '-' + (100-i*10).toString() : ((i-10)*10).toString();\r\n    \r\n\r\n      if (i<10) {\r\n        r = Math.round(255 - (rgbDiff[0]/10)*i);\r\n        g = Math.round(255 - (rgbDiff[1]/10)*i);\r\n        b = Math.round(255 - (rgbDiff[2]/10)*i);\r\n      } else {\r\n        r = Math.round(rgbArr[0] - (rgbArr[0]/10)*(i-10) );\r\n        g = Math.round(rgbArr[1] - (rgbArr[1]/10)*(i-10) );\r\n        b = Math.round(rgbArr[2] - (rgbArr[2]/10)*(i-10) );\r\n      }\r\n\r\n      let rgbRange = \"rgb(\"+ +r + \",\" + +g + \",\" + +b + \")\";\r\n\r\n      setColourList((prevColourList) => {\r\n        return [\r\n          ...prevColourList,\r\n          {\r\n            percentage: percentage,\r\n            hex: RGBToHex(rgbRange),\r\n            rgb: rgbRange\r\n          }\r\n        ]\r\n      })\r\n    }\r\n\r\n    // console.log(colourList);\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n    <div className='App'>\r\n      <SearchBar onSearchColour={showColourGrid}/>\r\n      <ColourGrid colourList={colourList}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}